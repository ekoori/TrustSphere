openapi: 3.0.0
info:
  title: TrustSphere API
  description: API for handling user interactions within the TrustSphere platform.
  version: 1.0.0

servers:
  - url: "https://api.trustsphere.example.com"
    description: TrustSphere API server

paths:

  /api/login:
    post:
      summary: User Login
      description: Logs in a user using their email and password.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    type: string
                    description: Auth token to use for accessing account-specific actions
        '401':
          description: Authentication failed
      tags:
        - Authentication
    options:
      summary: Options for User Login
      description: Retrieve the supported methods and other communicative options for the login endpoint.
      responses:
        '204':
          description: No Content
      tags:
        - Options
  /api/logout:
    post:
      summary: User Logout
      description: Handles the POST request for user logout and ends the current user session.
      operationId: logoutUser
      responses:
        200:
          description: Logout successful, session ended.
      tags:
        - Authentication
    options:
      summary: Options for User Logout
      description: Retrieve the supported methods and other communicative options for the login endpoint.
      responses:
        '204':
          description: No Content
      tags:
        - Options
  /api/check_session:
    post:
      summary: Check User Session
      description: Checks the validity of the current user session.
      operationId: postUserSession
      responses:
        200:
          description: Session is valid.
        401:
          description: Session is invalid or expired.
      tags:
        - Authentication
    get:
      summary: Check User Session
      description: Verifies if there is a currently logged-in user by checking the session ID.
      operationId: checkUserSession
      parameters:
        - name: session_id
          in: query
          required: true
          schema:
            type: string
          description: The session ID to verify the user session
      responses:
        '200':
          description: Session check successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  isLoggedIn:
                    type: boolean
                    description: Indicates whether a user is logged in or not
        '400':
          description: Bad request, possibly missing session information
      tags:
        - Authentication

  /api/register:
    post:
      summary: Register a new user
      description: Registers a new user with their name, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  description: Password Hash (Never send in plaintext)
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input parameters
      tags:
        - User Management


  /api/user:
    get:
      summary: Retrieve User Profile
      description: Fetches details of the currently logged-in user.
      operationId: getUserProfile
      parameters:
        - name: session_id
          in: query
          required: true
          schema:
            type: string
          description: The session ID to verify which user's profile to fetch
      responses:
        '200':
          description: User profile fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                  email:
                    type: string
                  name:
                    type: string
                  additionalProperties:
                    type: object
        '401':
          description: Unauthorized access, session invalid or not provided
      tags:
        - User Management
    post:
      summary: Update User Profile
      description: Updates the profile information for the logged-in user.
      operationId: updateUserProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session_id
              properties:
                session_id:
                  type: string
                  description: Auth token to use for verifying user identity
                email:
                  type: string
                  format: email
                  description: (Optional) New email to update
                name:
                  type: string
                  description: (Optional) New name to update
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request, missing or incorrect information provided
        '401':
          description: Unauthorized to update user profile
      tags:
        - User Management


  /api/trusttrail:
    get:
      summary: Get User TrustTrail
      description: Retrieves the trust trail for a specified user.
      operationId: getTrustTrailDetails
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          description: The ID of the user for whom to fetch the trust trail
      responses:
        '200':
          description: Trust trail fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustTrailDetails'
        '400':
          description: Bad request, possibly missing userId in query
        '405':
          description: Invalid request method. Only GET allowed.

  /api/trusttrail/add_transaction:
    post:
      summary: Add Transaction to TrustTrail (duplicate?)
      description: Adds a new transaction to the user's trust trail.
      operationId: addTrustTrailTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustTrailTransaction'
      responses:
        '200':
          description: Transaction added successfully
        '400':
          description: Bad request, possibly due to missing or incorrect data


  /api/trusttrail/{userId}:
    get:
      summary: Get comprehensive TrustTrail for a user
      operationId: getTrustTrail
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful retrieval of TrustTrail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustTrail'
        400:
          description: User ID not provided or invalid

  /api/trusttrail/transaction:
    post:
      summary: Add a new transaction to the TrustTrail
      operationId: addTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        200:
          description: Transaction successfully added
        400:
          description: Missing required fields

  /api/trusttrail/comment/gratitude:
    post:
      summary: Add a gratitude comment to a transaction
      operationId: addGratitudeComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transaction_id:
                  type: string
                  format: uuid
                comment:
                  type: string
      responses:
        200:
          description: Comment added successfully
        400:
          description: Missing required data or transaction not found

  /api/marketplace/post_service:
    post:
      summary: Post a Service
      description: Allows a user to post a new service to the marketplace.
      operationId: postService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - is_part_of_project
              properties:
                title:
                  type: string
                description:
                  type: string
                is_part_of_project:
                  type: boolean
                  description: Indicates whether the service is part of an existing project.
      responses:
        '201':
          description: Service successfully posted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Service successfully posted."
        '400':
          description: Bad request, possibly missing or incorrect information provided
      tags:
        - Marketplace
  
  /api/marketplace/browse_services:
    get:
      summary: Browse Services
      description: Retrieve a list of services based on specified filters.
      operationId: browseServices
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
            description: Filter criteria for browsing services.
      responses:
        '200':
          description: Successfully retrieved list of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '400':
          description: Incorrect filter specification
      tags:
        - Marketplace

  /api/marketplace/request_service:
    post:
      summary: Request a Service
      description: Allows a user to request a service.
      operationId: requestService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - service_id
                - user_id
              properties:
                service_id:
                  type: string
                  format: uuid
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Service request successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Service request successful."
        '400':
          description: Bad request, possibly due to incorrect service or user ID
      tags:
        - Marketplace

  /api/marketplace/accept_service:
    post:
      summary: Accept a Service
      description: Accepts a service offer, initiating an active transaction.
      operationId: acceptService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - service_id
                - user_id
              properties:
                service_id:
                  type: string
                  format: uuid
                user_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Service accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Service accepted successfully."
        '400':
          description: Bad request, possibly due to incorrect service or user ID
      tags:
        - Marketplace
  /api/unions:
    post:
      summary: Create a new union
      description: Allows an authorized user to create a new union.
      operationId: createUnion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Union'
      responses:
        '201':
          description: Union created successfully.
        '400':
          description: Bad request, possibly missing required data.
      tags:
        - Unions
  /api/unions/{unionId}:
    get:
      summary: Retrieve a union's details
      description: Returns detailed information about a union, including its members.
      operationId: getUnion
      parameters:
        - name: unionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved union details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Union'
        '404':
          description: Union not found.
      tags:
        - Unions

    patch:
      summary: Update a union's details
      description: Allows modifications to a union's details like name or description.
      operationId: updateUnion
      parameters:
        - name: unionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Union updated successfully.
        '400':
          description: Bad request, invalid data provided.
        '404':
          description: Union not found.
      tags:
        - Unions

    delete:
      summary: Delete a union
      description: Removes a union from the system. Should actually be deactivated instead of deleted.
      operationId: deleteUnion
      parameters:
        - name: unionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Union deleted successfully.
        '404':
          description: Union not found.
      tags:
        - Unions







components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        session_id:
          type: string
    Invitation:
      type: object
      properties:
        code:
          type: string
          format: uuid
          description: A unique identifier for the invitation.
          readOnly: true
        email:
          type: string
          format: email
          description: Email of the user to be invited.
      required:
        - email
      description: |
        This module contains the Invitation model for handling user invitation related tasks.

    TrustTrailTransaction:
      type: object
      required:
        - user_id
        - other_user_id
        - project_id
      properties:
        user_id:
          type: string
          description: The ID of the user who is initiating the transaction
        other_user_id:
          type: string
          description: The ID of the other user involved in the transaction
        project_id:
          type: string
          description: The ID of the project related to the transaction

    TrustTrailDetails:
      type: array
      items:
        type: object
        properties:
          transactionId:
            type: string
          involvedParties:
            type: array
            items:
              type: string
          details:
            type: object
            additionalProperties: true


    Transaction:
      type: object
      properties:
        transaction_id:
          type: string
          format: uuid
        other_user_id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        transaction_description:
          type: string
        transaction_status:
          type: string
    TrustTrail:
      type: array
      items:
        $ref: '#/components/schemas/Transaction'

    Service:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        is_part_of_project:
          type: boolean
        service_id:
          type: string
          format: uuid


    Union:
      type: object
      properties:
        union_id:
          type: string
          format: uuid
          description: A unique identifier for this union.
        name:
          type: string
          description: The name of the union.
        members:
          type: array
          items:
            type: string
            format: uuid
          description: List of user IDs who are members of this union.
        description:
          type: string
          description: A brief description or purpose of the union.
        created_at:
          type: string
          format: date-time
          description: Timestamp of when the union was created.
      required:
        - union_id
        - name
        - members